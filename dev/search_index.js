var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API","title":"API Reference","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"This page provides a list of all documented types and functions and in StreamingSampling.jl.","category":"page"},{"location":"api/#StreamingSampling.UPmaxentropy-Tuple{AbstractVector{<:Real}}","page":"API","title":"StreamingSampling.UPmaxentropy","text":"UPmaxentropy(pik::AbstractVector{<:Real})\n\nMaximum entropy sampling (conditional Poisson sampling) implementation.\n\nSamples elements without repetition with fixed sample size, given first-order inclusion probabilities. This method satisfies the maximum entropy criterion among all sampling designs with the same inclusion probabilities.\n\nArguments\n\npik: Vector of first-order inclusion probabilities (0 ≤ pik[i] ≤ 1)        The sum of pik determines the sample size.\n\nReturns\n\nA binary vector indicating selected units (1 = selected, 0 = not selected)\n\nExamples\n\n# Sample with inclusion probabilities summing to 5\npik = [0.2, 0.3, 0.5, 0.8, 0.9, 0.7, 0.6, 1.0]\ns = UPmaxentropy(pik)\nprintln(\"Selected units: \", findall(s .== 1))\nprintln(\"Sample size: \", sum(s))\n\nReferences\n\nTillé, Y. (2006). Sampling Algorithms. Springer.\n\nThis code was generated by Claude, based on the UPmaxentropy function from the R package sampling.\n\n\n\n\n\n","category":"method"},{"location":"api/#StreamingSampling.UPmaxentropypi2-Tuple{AbstractVector{<:Real}}","page":"API","title":"StreamingSampling.UPmaxentropypi2","text":"UPmaxentropypi2(pik::AbstractVector{<:Real})\n\nCompute second-order inclusion probabilities for maximum entropy sampling.\n\nArguments\n\npik: Vector of first-order inclusion probabilities\n\nReturns\n\nMatrix of second-order inclusion probabilities π_{kl} = P(k ∈ S, l ∈ S)\n\n\n\n\n\n","category":"method"},{"location":"api/#StreamingSampling.rand_multinomial-Tuple{AbstractVector{<:Real}}","page":"API","title":"StreamingSampling.rand_multinomial","text":"rand_multinomial(pik)\n\nRandom multinomial draw (for n=1 case). Selects one unit with probabilities proportional to pik.\n\n\n\n\n\n","category":"method"},{"location":"api/#StreamingSampling.upme_pik2_from_pikw-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"API","title":"StreamingSampling.upme_pik2_from_pikw","text":"upme_pik2_from_pikw(pik, w)\n\nCompute second-order inclusion probabilities from first-order probabilities and weights. Uses the formula: π{kl} = (πk * wl - πl * wk) / (wl - w_k) for k ≠ l\n\n\n\n\n\n","category":"method"},{"location":"api/#StreamingSampling.upme_pik_from_q-Tuple{AbstractMatrix{<:Real}}","page":"API","title":"StreamingSampling.upme_pik_from_q","text":"upme_pik_from_q(q)\n\nCompute first-order inclusion probabilities from conditional probability matrix q. Used in the iterative algorithm to verify convergence.\n\npro[i,j] represents the probability that when processing unit i,  there are exactly j units remaining to be selected.\n\n\n\n\n\n","category":"method"},{"location":"api/#StreamingSampling.upme_piktilde_from_pik","page":"API","title":"StreamingSampling.upme_piktilde_from_pik","text":"upme_piktilde_from_pik(pik, eps=1e-6)\n\nTransform inclusion probabilities through iterative algorithm. This computes adjusted probabilities that ensure the correct first-order inclusion probabilities after the sampling procedure.\n\n\n\n\n\n","category":"function"},{"location":"api/#StreamingSampling.upme_q_from_w-Tuple{AbstractVector{<:Real}, Int64}","page":"API","title":"StreamingSampling.upme_q_from_w","text":"upme_q_from_w(w, n)\n\nCompute the matrix of conditional probabilities q[i,z] from weights. q[i,z] represents the probability of selecting unit i given that z units remain to be selected from units i through N.\n\n\n\n\n\n","category":"method"},{"location":"api/#StreamingSampling.upme_s_from_q-Tuple{AbstractMatrix{<:Real}}","page":"API","title":"StreamingSampling.upme_s_from_q","text":"upme_s_from_q(q)\n\nGenerate a sample from the conditional probability matrix q. Sequential sampling: at each step, select unit k with probability q[k,n] where n is the number of units remaining to be selected.\n\n\n\n\n\n","category":"method"},{"location":"generated/simple-example/simple-example/","page":"Simple example","title":"Simple example","text":"using StreamingSampling\nusing StatsBase: sample, Weights\nusing Plots","category":"page"},{"location":"generated/simple-example/simple-example/","page":"Simple example","title":"Simple example","text":"Define file paths","category":"page"},{"location":"generated/simple-example/simple-example/","page":"Simple example","title":"Simple example","text":"base = haskey(ENV, \"BASE_PATH\") ? ENV[\"BASE_PATH\"] : \"../../\"\npath = \"$base/test/data/\"\nfile_paths = [\"$path/data1.txt\",\n              \"$path/data2.txt\",\n              \"$path/data3.txt\",\n              \"$path/data4.txt\"];\n\ninclude(\"$base/examples/simple-example/plot_weights.jl\"); #hide\nnothing #hide","category":"page"},{"location":"generated/simple-example/simple-example/","page":"Simple example","title":"Simple example","text":"Define sample size","category":"page"},{"location":"generated/simple-example/simple-example/","page":"Simple example","title":"Simple example","text":"n = 30;\nnothing #hide","category":"page"},{"location":"generated/simple-example/simple-example/","page":"Simple example","title":"Simple example","text":"Streaming weighted sampling","category":"page"},{"location":"generated/simple-example/simple-example/","page":"Simple example","title":"Simple example","text":"ws = compute_weights(file_paths; chunksize=500, subchunksize=100)\ninds_w = sample(1:length(ws), Weights(ws), n; replace=false)\nplot_weights(ws, inds_w) #hide","category":"page"},{"location":"generated/simple-example/simple-example/","page":"Simple example","title":"Simple example","text":"Streaming maximum entropy sampling","category":"page"},{"location":"generated/simple-example/simple-example/","page":"Simple example","title":"Simple example","text":"s = UPmaxentropy(inclusion_prob(ws, n))\ninds_me = findall(s .== 1)\nplot_weights(ws, inds_me) #hide","category":"page"},{"location":"generated/simple-example/simple-example/","page":"Simple example","title":"Simple example","text":"","category":"page"},{"location":"generated/simple-example/simple-example/","page":"Simple example","title":"Simple example","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#StreamingSampling.jl","page":"Home","title":"StreamingSampling.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"StreamingSampling is a Julia-based proof-of-concept implementation of a streamed variants of maximum-entropy sampling (UPmaxentropy) and weighted sampling. It is designed to process large datasets stored on disk with minimal impact on RAM. The method begins by computing first-order inclusion probabilities using a DPP-based heuristic, and then feeds these probabilities into classical sampling algorithms to produce diverse samples.","category":"page"},{"location":"","page":"Home","title":"Home","text":"<a href=\"https://julia.mit.edu/StreamingSampling.jl/dev/\"> <img alt=\"Development documentation\" src=\"https://img.shields.io/badge/documentation-in%20development-orange?style=flat-square\"> </a> <a href=\"https://mit-license.org\"> <img alt=\"MIT license\" src=\"https://img.shields.io/badge/License-MIT-blue.svg?style=flat-square\"> </a> <a href=\"https://github.com/JuliaLabs/StreamingSampling.jl/issues/new\"> <img alt=\"Ask us anything\" src=\"https://img.shields.io/badge/Ask%20us-anything-1abc9c.svg?style=flat-square\"> </a> </a>  <br /> <br />","category":"page"}]
}
